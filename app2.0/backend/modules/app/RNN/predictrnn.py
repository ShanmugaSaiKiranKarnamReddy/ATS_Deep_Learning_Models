# -*- coding: utf-8 -*-
"""PredictRNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctU8VlUTiUU9oWLPJyrXLXHf50jmtOsS
"""

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

from app import app, mongo, flask_bcrypt, jwt

import re
import os
from os.path import isfile, join
from tensorflow.python.keras import backend as K
from tensorflow.python.keras.layers import Layer
from tensorflow.python.keras.preprocessing.sequence import pad_sequences

from nltk.corpus import stopwords
from gensim.models import KeyedVectors

import gensim

import numpy as np
__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))
import itertools

def text_to_word_list(text):
    # Pre process and convert texts to a list of words
    text = str(text)
    text = text.lower()

    # Clean the text
    text = re.sub(r"[^A-Za-z0-9^,!.\/'+-=]", " ", text)
    text = re.sub(r"what's", "what is ", text)
    text = re.sub(r"\'s", " ", text)
    text = re.sub(r"\'ve", " have ", text)
    text = re.sub(r"can't", "cannot ", text)
    text = re.sub(r"n't", " not ", text)
    text = re.sub(r"i'm", "i am ", text)
    text = re.sub(r"\'re", " are ", text)
    text = re.sub(r"\'d", " would ", text)
    text = re.sub(r"\'ll", " will ", text)
    text = re.sub(r",", " ", text)
    text = re.sub(r"\.", " ", text)
    text = re.sub(r"!", " ! ", text)
    text = re.sub(r"\/", " ", text)
    text = re.sub(r"\^", " ^ ", text)
    text = re.sub(r"\+", " + ", text)
    text = re.sub(r"\-", " - ", text)
    text = re.sub(r"\=", " = ", text)
    text = re.sub(r"'", " ", text)
    text = re.sub(r"(\d+)(k)", r"\g<1>000", text)
    text = re.sub(r":", " : ", text)
    text = re.sub(r" e g ", " eg ", text)
    text = re.sub(r" b g ", " bg ", text)
    text = re.sub(r" u s ", " american ", text)
    text = re.sub(r"\0s", "0", text)
    text = re.sub(r" 9 11 ", "911", text)
    text = re.sub(r"e - mail", "email", text)
    text = re.sub(r"j k", "jk", text)
    text = re.sub(r"\s{2,}", " ", text)

    text = text.split()

    return text

# EMBEDDING_FILE = './data/Resume_JD_new_13.w2v'
EMBEDDING_FILE = os.path.join(__location__, 'Resume_JD_new_14.w2v')
#word2vec embedding
def make_w2v_embeddings(df, embedding_dim=300, empty_w2v=False):
    vocabs = {}
    vocabs_cnt = 0

    vocabs_not_w2v = {}
    vocabs_not_w2v_cnt = 0

    # Stopwords
    stops = set(stopwords.words('english'))

    # Load word2vec
    print("Loading word2vec model(it may takes 2-3 mins) ...")

    if empty_w2v:
        word2vec = EmptyWord2Vec
    else:
        word2vec = KeyedVectors.load_word2vec_format(EMBEDDING_FILE, binary=True)
                    
    for index, row in df.iterrows():
        # Print the number of embedded sentences.
        if index != 0 and index % 1000 == 0:
            print("{:,} sentences embedded.".format(index), flush=True)

        # Iterate through the text of both questions of the row
        for question in ['Resume', 'JD']:

            q2n = []  # q2n -> question numbers representation
            for word in text_to_word_list(row[question]):
                # Check for unwanted words
                if word in stops:
                    continue

                # If a word is missing from word2vec model.
                if word not in word2vec.vocab:
                    if word not in vocabs_not_w2v:
                        vocabs_not_w2v_cnt += 1
                        vocabs_not_w2v[word] = 1

                # If you have never seen a word, append it to vocab dictionary.
                if word not in vocabs:
                    vocabs_cnt += 1
                    vocabs[word] = vocabs_cnt
                    q2n.append(vocabs_cnt)
                else:
                    q2n.append(vocabs[word])

            # Append question as number representation
            df.at[index, question + '_n'] = q2n

    embeddings = 1 * np.random.randn(len(vocabs) + 1, embedding_dim)  # This will be the embedding matrix
    embeddings[0] = 0  # So that the padding will be ignored

    # Build the embedding matrix
    for word, index in vocabs.items():
        if word in word2vec.vocab:
            embeddings[index] = word2vec.word_vec(word)
    del word2vec

    return df, embeddings

#zero padding
def split_and_zero_padding(df, max_seq_length):
    # Split to dicts
    X = {'left': df['Resume_n'], 'right': df['JD_n']}

    # Zero padding
    for dataset, side in itertools.product([X], ['left', 'right']):
        dataset[side] = pad_sequences(dataset[side], padding='pre', truncating='post', maxlen=max_seq_length)

    return dataset


#  --
#Manhattan distance
class ManDist(Layer):
    """
    Keras Custom Layer that calculates Manhattan Distance.
    """

    # initialize the layer, No need to include inputs parameter!
    def __init__(self, **kwargs):
        self.result = None
        super(ManDist, self).__init__(**kwargs)

    # input_shape will automatic collect input shapes to build layer
    def build(self, input_shape):
        super(ManDist, self).build(input_shape)

    # This is where the layer's logic lives.
    def call(self, x, **kwargs):
        self.result = K.exp(-K.sum(K.abs(x[0] - x[1]), axis=1, keepdims=True))
        return self.result

    # return output shape
    def compute_output_shape(self, input_shape):
        return K.int_shape(self.result)


class EmptyWord2Vec:
    """
    Just for test use.
    """
    vocab = {}
    word_vec = {}

import pandas as pd

import tensorflow as tf

from .util import make_w2v_embeddings
from .util import split_and_zero_padding
from .util import ManDist

# TEST_CSV = os.path.join(__location__, 'MLSTM_TEST_2.xlsx')
def get_rnn_result(pairs):

    # cur_cv = mongo.db.cv_corpus.find({"session_id": session_id})
    # cur_jd = mongo.db.jd_corpus.find({"session_id": session_id})

    # cur_cv_list=[]
    # cur_jd_list=[]
    # pair = []
    # test_df3={}
    # for jd in cur_jd:
    #     cur_cv_list.append(jd)

    # for cv in cur_cv:
    #     cur_jd_list.append(cv)

    # for jd in cur_cv_list:
    #     for cv in cur_jd_list:
    #         pair.append({
    #             "Resume": cv["cv_corpus"], 
    #             "cv_mongo_object_id": cv["cv_mongo_object_id"], 
    #             "cv_session_id": cv["cv_corpus"], 
    #             "JD": jd["jd_corpus"], 
    #             "jd_mongo_object_id": jd["jd_mongo_object_id"],
    #             "jd_session_id": jd["session_id"]
    #             })
    #         test_df3 = pd.DataFrame(pair)

    test_df3 = pd.DataFrame(pairs)
    pair = pairs


    for q in ['Resume', 'JD']:
        test_df3[q + '_n'] = test_df3[q]
    test_df3

    import nltk
    nltk.download('stopwords')

    use_w2v = True

    embedding_dim = 300
    max_seq_length = 70
    test_df3, embeddings = make_w2v_embeddings(test_df3, embedding_dim=embedding_dim, empty_w2v=use_w2v)

    # Split to dicts and append zero padding.
    X_test = split_and_zero_padding(test_df3, max_seq_length)

    # Make sure everything is ok
    assert X_test['left'].shape == X_test['right'].shape

    model = tf.keras.models.load_model( os.path.join(__location__, 'RNN.h5'), custom_objects={'ManDist': ManDist})
    model.summary()

    prediction = model.predict([X_test['left'], X_test['right']]) * 100
    
    for index, i in enumerate(prediction):   
        pair[index]["score"] = i[0] 
    return pair
    #     if 80 <= i <= 100:
    #         pair[index]["score"] = 5
    #     elif 60 <= i < 80:

    #         pair[index]["score"] = 4
    #     elif 40 <= i < 60:

    #         pair[index]["score"] = 3
    #     elif 20 <= i <40:

    #         pair[index]["score"] = 2
    #     else:

    #         pair[index]["score"] = 1
    
    # return pair



